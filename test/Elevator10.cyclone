option-trace=true;
graph Elevator{
    const int FLOORS=10;

    // Landing call buttons for each floor
    bool l0_u, l0_d;
    bool l1_u, l1_d;
    bool l2_u, l2_d;
    bool l3_u, l3_d;
    bool l4_u, l4_d;
    bool l5_u, l5_d;
    bool l6_u, l6_d;
    bool l7_u, l7_d;
    bool l8_u, l8_d;
    bool l9_u, l9_d;

    // Car call buttons
    bool c0;
    bool c1;
    bool c2;
    bool c3;
    bool c4;
    bool c5;
    bool c6;
    bool c7;
    bool c8;
    bool c9;

    enum {UP, DOWN, NA} DIR;
    int f where f >= 0 && f <= FLOORS - 1; // Current floor

    normal node DoorOpen {}
    normal node MoveUp { f++; }
    normal node MoveDown { f--; }

    normal node CC {}
    normal start node LC {}

    normal node SetMotionUp { DIR = #UP; }
    normal node SetMotionDown { DIR = #DOWN; }
    normal node SetIdle { DIR = #NA; }

    // Initialize state for each floor
    normal node L0 {
        c0 = false;
        l0_u = false;
        l0_d = false;
    }
    normal node L1 {
        c1 = false;
        l1_u = false;
        l1_d = false;
    }
    normal node L2 {
        c2 = false;
        l2_u = false;
        l2_d = false;
    }
    normal node L3 {
        c3 = false;
        l3_u = false;
        l3_d = false;
    }
    normal node L4 {
        c4 = false;
        l4_u = false;
        l4_d = false;
    }
    normal node L5 {
        c5 = false;
        l5_u = false;
        l5_d = false;
    }
    normal node L6 {
        c6 = false;
        l6_u = false;
        l6_d = false;
    }
    normal node L7 {
        c7 = false;
        l7_u = false;
        l7_d = false;
    }
    normal node L8 {
        c8 = false;
        l8_u = false;
        l8_d = false;
    }
    normal node L9 {
        c9 = false;
        l9_u = false;
        l9_d = false;
    }

    final normal node DoorClose {}

    edge { LC -> DoorOpen 
        where (f == 0 && (l0_u || l0_d)) ||
              (f == 1 && (l1_u || l1_d)) ||
              (f == 2 && (l2_u || l2_d)) ||
              (f == 3 && (l3_u || l3_d)) ||
              (f == 4 && (l4_u || l4_d)) ||
              (f == 5 && (l5_u || l5_d)) ||
              (f == 6 && (l6_u || l6_d)) ||
              (f == 7 && (l7_u || l7_d)) ||
              (f == 8 && (l8_u || l8_d)) ||
              (f == 9 && (l9_u || l9_d));
    }

    edge { LC -> SetMotionUp
        where (
            (f == 0 && (l1_u || l2_u || l3_u || l4_u || l5_u || l6_u || l7_u || l8_u || l9_u || l1_d || l2_d || l3_d || l4_d || l5_d || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 1 && (l2_u || l3_u || l4_u || l5_u || l6_u || l7_u || l8_u || l9_u || l2_d || l3_d || l4_d || l5_d || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 2 && (l3_u || l4_u || l5_u || l6_u || l7_u || l8_u || l9_u || l3_d || l4_d || l5_d || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 3 && (l4_u || l5_u || l6_u || l7_u || l8_u || l9_u || l4_d || l5_d || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 4 && (l5_u || l6_u || l7_u || l8_u || l9_u || l5_d || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 5 && (l6_u || l7_u || l8_u || l9_u || l6_d || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 6 && (l7_u || l8_u || l9_u || l7_d || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 7 && (l8_u || l9_u || l8_d || l9_d) && (DIR == #UP || DIR == #NA)) ||
            (f == 8 && (l9_u || l9_d) && (DIR == #UP || DIR == #NA))         );
    }

    edge { LC -> SetMotionDown
        where (
            (f == 9 && (l0_d || l1_d || l2_d || l3_d || l4_d || l5_d || l6_d || l7_d || l8_d || l0_u || l1_u || l2_u || l3_u || l4_u || l5_u || l6_u || l7_u || l8_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 8 && (l0_d || l1_d || l2_d || l3_d || l4_d || l5_d || l6_d || l7_d || l0_u || l1_u || l2_u || l3_u || l4_u || l5_u || l6_u || l7_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 7 && (l0_d || l1_d || l2_d || l3_d || l4_d || l5_d || l6_d || l0_u || l1_u || l2_u || l3_u || l4_u || l5_u || l6_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 6 && (l0_d || l1_d || l2_d || l3_d || l4_d || l5_d || l0_u || l1_u || l2_u || l3_u || l4_u || l5_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 5 && (l0_d || l1_d || l2_d || l3_d || l4_d || l0_u || l1_u || l2_u || l3_u || l4_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 4 && (l0_d || l1_d || l2_d || l3_d || l0_u || l1_u || l2_u || l3_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 3 && (l0_d || l1_d || l2_d || l0_u || l1_u || l2_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 2 && (l0_d || l1_d || l0_u || l1_u) && (DIR == #DOWN || DIR == #NA)) ||
            (f == 1 && (l0_d || l0_u) && (DIR == #DOWN || DIR == #NA))         );
    }

    edge { DoorOpen -> CC }
    edge { CC -> DoorClose }
    edge { DoorClose -> SetMotionUp
        where (DIR == #UP && f < FLOORS-1);
    }
    edge { DoorClose -> SetMotionDown
        where (DIR == #DOWN && f > 0);
    }

    edge { DoorClose -> SetIdle where 
        (!c0 && !c1 && !c2 && !c3 && !c4 && !c5 && !c6 && !c7 && !c8 && !c9);
    }
    edge { SetMotionUp -> MoveUp }
    edge { SetMotionDown -> MoveDown }
    edge { MoveUp -> MoveUp }
    edge { MoveDown -> MoveDown }
    edge { MoveDown -> L0 where f == 0 && (c0 || l0_u); }
    edge { MoveUp -> L1 where f == 1 && (c1 || l1_d); }
    edge { MoveDown -> L1 where f == 1 && (c1 || l1_u); }
    edge { MoveUp -> L2 where f == 2 && (c2 || l2_d); }
    edge { MoveDown -> L2 where f == 2 && (c2 || l2_u); }
    edge { MoveUp -> L3 where f == 3 && (c3 || l3_d); }
    edge { MoveDown -> L3 where f == 3 && (c3 || l3_u); }
    edge { MoveUp -> L4 where f == 4 && (c4 || l4_d); }
    edge { MoveDown -> L4 where f == 4 && (c4 || l4_u); }
    edge { MoveUp -> L5 where f == 5 && (c5 || l5_d); }
    edge { MoveDown -> L5 where f == 5 && (c5 || l5_u); }
    edge { MoveUp -> L6 where f == 6 && (c6 || l6_d); }
    edge { MoveDown -> L6 where f == 6 && (c6 || l6_u); }
    edge { MoveUp -> L7 where f == 7 && (c7 || l7_d); }
    edge { MoveDown -> L7 where f == 7 && (c7 || l7_u); }
    edge { MoveUp -> L8 where f == 8 && (c8 || l8_d); }
    edge { MoveDown -> L8 where f == 8 && (c8 || l8_u); }
    edge { MoveUp -> L9 where f == 9 && (c9 || l9_d); }
    edge { L0 -> DoorOpen }
    edge { L1 -> DoorOpen }
    edge { L2 -> DoorOpen }
    edge { L3 -> DoorOpen }
    edge { L4 -> DoorOpen }
    edge { L5 -> DoorOpen }
    edge { L6 -> DoorOpen }
    edge { L7 -> DoorOpen }
    edge { L8 -> DoorOpen }
    edge { L9 -> DoorOpen }

    goal{
        assert (initial(c0) && !initial(c1) && !initial(c2) && !initial(c3) && initial(f)==5
            && !initial(l0_u) && initial(l1_u) && !initial(l1_d) && initial(l2_d) && !initial(l2_u) 
            && !initial(l3_d) && initial(DIR)==#DOWN);

        check upto 15 condition (L0) reach (CC,LC,L0,L1,L2,L3,L4,L5)
    }
}
